#!/usr/bin/env python3

import rospy
import math
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Quaternion

class PathPublisher:
    def __init__(self):
        rospy.init_node('gps_path_sin_publisher', anonymous=True)
        self.path_pub = rospy.Publisher('/gps_path', Path, queue_size=10)
        
        self.path = self.generate_path()
        
        self.timer = rospy.Timer(rospy.Duration(5), self.publish_path)

    def generate_path(self):
        path = Path()
        path.header.frame_id = "map"
        
        amplitude = 0.5     # Amplitude of the sine wave
        wavelength = 5.0   # Wavelength of the sine wave
        num_points = 100    # Number of waypoints
        x_start = 0.0       # Starting x position
        x_end = 10.0        # Ending x position
        x_step = (x_end - x_start) / num_points

        for i in range(num_points + 1):
            pose = PoseStamped()
            pose.header.frame_id = "map"
            pose.header.stamp = rospy.Time.now()

            x = x_start + i * x_step
            y = amplitude * math.sin((2 * math.pi / wavelength) * x)

            pose.pose.position.x = x
            pose.pose.position.y = y
            pose.pose.position.z = 0.0

            if i < num_points:
                next_x = x_start + (i + 1) * x_step
                next_y = amplitude * math.sin((2 * math.pi / wavelength) * next_x)
                dx = next_x - x
                dy = next_y - y
            else:
                prev_x = x_start + (i - 1) * x_step
                prev_y = amplitude * math.sin((2 * math.pi / wavelength) * prev_x)
                dx = x - prev_x
                dy = y - prev_y

            yaw = math.atan2(dy, dx)

            quaternion = self.yaw_to_quaternion(yaw)
            pose.pose.orientation = quaternion

            path.poses.append(pose)

        return path

    def yaw_to_quaternion(self, yaw):
        q = Quaternion()
        q.w = math.cos(yaw / 2.0)
        q.x = 0.0
        q.y = 0.0
        q.z = math.sin(yaw / 2.0)
        return q

    def publish_path(self, event):
        self.path.header.stamp = rospy.Time.now()
        for pose in self.path.poses:
            pose.header.stamp = self.path.header.stamp
        self.path_pub.publish(self.path)

if __name__ == '__main__':
    try:
        path_publisher = PathPublisher()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
